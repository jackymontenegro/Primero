
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Anallizadores;

import java_cup.runtime.*;
import ejemplo1.*;
import Listas.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\005\004" +
    "\000\002\005\003\000\002\006\005\000\002\006\010\000" +
    "\002\006\010\000\002\006\010\000\002\006\010\000\002" +
    "\007\004\000\002\007\003\000\002\011\004\000\002\011" +
    "\003\000\002\013\004\000\002\013\003\000\002\015\004" +
    "\000\002\015\003\000\002\020\004\000\002\020\003\000" +
    "\002\010\007\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\021\003\000\002\021\003\000\002\012\007" +
    "\000\002\023\005\000\002\023\003\000\002\024\005\000" +
    "\002\014\006\000\002\026\004\000\002\026\003\000\002" +
    "\025\006\000\002\016\005\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\017\004\000\002\031\007\000" +
    "\002\032\007\000\002\033\005\000\002\033\003\000\002" +
    "\035\005\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\034\005\000\002\034\003\000\002\037\005" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\004\036\005\001\002\000\006\002\ufffe\036" +
    "\ufffe\001\002\000\014\004\020\013\013\015\015\017\012" +
    "\035\014\001\002\000\006\002\000\036\005\001\002\000" +
    "\004\002\010\001\002\000\004\002\001\001\002\000\006" +
    "\002\uffff\036\uffff\001\002\000\004\046\160\001\002\000" +
    "\004\046\136\001\002\000\004\046\065\001\002\000\004" +
    "\046\044\001\002\000\016\004\020\013\013\015\015\017" +
    "\012\035\014\046\042\001\002\000\016\004\ufffb\013\ufffb" +
    "\015\ufffb\017\ufffb\035\ufffb\046\ufffb\001\002\000\004\045" +
    "\023\001\002\000\006\045\ufff4\047\ufff4\001\002\000\006" +
    "\045\023\047\041\001\002\000\004\040\024\001\002\000" +
    "\016\005\033\006\031\007\025\010\030\011\026\012\027" +
    "\001\002\000\004\037\uffe8\001\002\000\004\037\uffe6\001" +
    "\002\000\004\037\uffe5\001\002\000\004\037\uffe7\001\002" +
    "\000\004\037\uffe9\001\002\000\004\037\034\001\002\000" +
    "\004\037\uffea\001\002\000\006\042\037\044\035\001\002" +
    "\000\010\041\uffe4\045\uffe4\047\uffe4\001\002\000\006\045" +
    "\uffeb\047\uffeb\001\002\000\010\041\uffe3\045\uffe3\047\uffe3" +
    "\001\002\000\006\045\ufff5\047\ufff5\001\002\000\016\004" +
    "\ufffa\013\ufffa\015\ufffa\017\ufffa\035\ufffa\046\ufffa\001\002" +
    "\000\006\002\ufffd\036\ufffd\001\002\000\016\004\ufffc\013" +
    "\ufffc\015\ufffc\017\ufffc\035\ufffc\046\ufffc\001\002\000\004" +
    "\036\046\001\002\000\004\036\ufff0\001\002\000\004\045" +
    "\055\001\002\000\004\036\050\001\002\000\006\045\055" +
    "\047\054\001\002\000\004\036\ufff1\001\002\000\006\045" +
    "\055\047\063\001\002\000\006\045\uffdc\047\uffdc\001\002" +
    "\000\004\015\061\001\002\000\004\016\056\001\002\000" +
    "\004\037\057\001\002\000\004\043\060\001\002\000\006" +
    "\045\uffdb\047\uffdb\001\002\000\016\004\ufff8\013\ufff8\015" +
    "\ufff8\017\ufff8\035\ufff8\046\ufff8\001\002\000\006\045\uffdd" +
    "\047\uffdd\001\002\000\004\046\064\001\002\000\004\036" +
    "\uffde\001\002\000\004\036\070\001\002\000\004\036\132" +
    "\001\002\000\004\036\107\001\002\000\004\004\072\001" +
    "\002\000\004\036\uffec\001\002\000\010\026\075\027\073" +
    "\033\077\001\002\000\004\037\uffcc\001\002\000\006\041" +
    "\uffcf\047\uffcf\001\002\000\004\037\uffcd\001\002\000\004" +
    "\037\105\001\002\000\004\037\uffcb\001\002\000\006\041" +
    "\102\047\101\001\002\000\004\046\104\001\002\000\010" +
    "\026\075\027\073\033\077\001\002\000\006\041\uffd0\047" +
    "\uffd0\001\002\000\004\036\uffd2\001\002\000\004\044\106" +
    "\001\002\000\006\041\uffce\047\uffce\001\002\000\004\013" +
    "\111\001\002\000\004\036\uffd3\001\002\000\012\030\120" +
    "\031\112\032\116\034\113\001\002\000\004\037\uffc3\001" +
    "\002\000\004\037\uffc1\001\002\000\006\041\uffc9\047\uffc9" +
    "\001\002\000\006\041\126\047\127\001\002\000\004\037" +
    "\uffc2\001\002\000\004\037\121\001\002\000\004\037\uffc4" +
    "\001\002\000\010\024\122\025\124\044\123\001\002\000" +
    "\006\041\uffc6\047\uffc6\001\002\000\006\041\uffc7\047\uffc7" +
    "\001\002\000\006\041\uffc5\047\uffc5\001\002\000\006\041" +
    "\uffc8\047\uffc8\001\002\000\012\030\120\031\112\032\116" +
    "\034\113\001\002\000\004\046\130\001\002\000\004\036" +
    "\uffd1\001\002\000\006\041\uffca\047\uffca\001\002\000\006" +
    "\004\072\047\134\001\002\000\004\036\uffed\001\002\000" +
    "\004\035\135\001\002\000\016\004\ufff6\013\ufff6\015\ufff6" +
    "\017\ufff6\035\ufff6\046\ufff6\001\002\000\004\036\137\001" +
    "\002\000\004\014\144\001\002\000\004\036\142\001\002" +
    "\000\004\036\ufff2\001\002\000\006\014\144\047\145\001" +
    "\002\000\004\036\ufff3\001\002\000\004\045\151\001\002" +
    "\000\004\013\146\001\002\000\016\004\ufff9\013\ufff9\015" +
    "\ufff9\017\ufff9\035\ufff9\046\ufff9\001\002\000\006\041\155" +
    "\047\154\001\002\000\006\041\uffe0\047\uffe0\001\002\000" +
    "\004\037\152\001\002\000\006\042\037\044\035\001\002" +
    "\000\006\041\uffdf\047\uffdf\001\002\000\004\046\157\001" +
    "\002\000\004\045\151\001\002\000\006\041\uffe1\047\uffe1" +
    "\001\002\000\004\036\uffe2\001\002\000\012\020\167\021" +
    "\162\022\164\023\163\001\002\000\014\020\167\021\162" +
    "\022\164\023\163\036\174\001\002\000\004\037\uffd8\001" +
    "\002\000\004\037\uffd7\001\002\000\004\037\uffd6\001\002" +
    "\000\014\020\uffee\021\uffee\022\uffee\023\uffee\036\uffee\001" +
    "\002\000\004\037\170\001\002\000\004\037\uffd9\001\002" +
    "\000\006\024\171\025\173\001\002\000\014\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\036\uffd5\001\002\000\014\020\uffda" +
    "\021\uffda\022\uffda\023\uffda\036\uffda\001\002\000\014\020" +
    "\uffd4\021\uffd4\022\uffd4\023\uffd4\036\uffd4\001\002\000\004" +
    "\047\176\001\002\000\014\020\uffef\021\uffef\022\uffef\023" +
    "\uffef\036\uffef\001\002\000\004\017\177\001\002\000\016" +
    "\004\ufff7\013\ufff7\015\ufff7\017\ufff7\035\ufff7\046\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\175\000\010\002\006\003\005\004\003\001\001\000" +
    "\002\001\001\000\006\005\015\006\016\001\001\000\004" +
    "\004\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\042\001\001\000" +
    "\002\001\001\000\006\007\021\010\020\001\001\000\002" +
    "\001\001\000\004\010\037\001\001\000\002\001\001\000" +
    "\004\022\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\046\014\044\001\001\000\002\001" +
    "\001\000\006\025\052\026\051\001\001\000\004\014\050" +
    "\001\001\000\006\025\052\026\051\001\001\000\002\001" +
    "\001\000\004\025\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\070\020" +
    "\065\031\066\001\001\000\006\017\132\031\066\001\001" +
    "\000\004\032\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\077\035\073\036\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\102\036\075\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\114\037\113\040" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\041\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\130\040\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\137\012\140\001\001\000\002\001\001\000\004\012" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\146\024\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\155\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\015\160\016\164\027" +
    "\165\001\001\000\006\016\174\027\165\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String cadena=" ";
     
    public void enviarLista(String dato){
        String[] arrayDato = dato.split(";");

        for(int i = 0; i< arrayDato.length; i++){
        erroresList list = new erroresList(arrayDato[i]);
        Open.lista2.add(list);
        }

    	
    }

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
erroresList error =new erroresList("ERROR SINTACTICO: ",". Identificador "
        +s.value + " no reconocido.","FILA:  "+(s.right+1),"COLUMNA:  "+(s.left+1),"SE ESPERABA OTRA PALABRA");
        Open.lista.add(error);
        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");

erroresList error =new erroresList("ERROR SINTACTICO: ",". Identificador "
        +s.value + " no reconocido.","FILA:  "+(s.right+1),"COLUMNA:  "+(s.left+1),"SE ESPERABA OTRA PALABRA");
        Open.lista.add(error);
        
    
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Nodo raiz=null;
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= TITULOS 
            {
              Object RESULT =null;
		int tlosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tlosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tlos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
cadena=tlos.toString();
enviarLista(cadena);

System.out.println(cadena);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TITULOS ::= TITULOS TITULO 
            {
              Object RESULT =null;
		int tlosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tlosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tlos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tlo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tlos.toString()+tlo.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TITULOS ::= TITULO 
            {
              Object RESULT =null;
		int tloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object tlo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tlo.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULOS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TITULO ::= abre ETIQUETAS cierra 
            {
              Object RESULT =null;
		int etqsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int etqsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object etqs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = etqs.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULO",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ETIQUETAS ::= ETIQUETAS ETIQUETA 
            {
              Object RESULT =null;
		int etqsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int etqsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object etqs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int etqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int etqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object etq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = etqs.toString()+etq.toString()+";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ETIQUETAS ::= ETIQUETA 
            {
              Object RESULT =null;
		int etqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int etqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object etq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = etq.toString()+";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETAS",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ETIQUETA ::= encabezado ENCAS bar 
            {
              Object RESULT =null;
		int encabeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int encaberight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String encabe = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ec = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT =encabe.toString()+","+ ec.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ETIQUETA ::= cuerpo cierra CUERS abre bar cuerpo 
            {
              Object RESULT =null;
		int cuerpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cuerpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cuerp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int crsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int crsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object crs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = cuerp.toString()+","+crs.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ETIQUETA ::= ponderacion cierra PONDS abre bar ponderacion 
            {
              Object RESULT =null;
		int ponderaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int ponderaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String pondera = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = pondera.toString()+","+pds.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ETIQUETA ::= reportes cierra REPORS abre bar reportes 
            {
              Object RESULT =null;
		int reportleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int reportright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String report = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int repsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int repsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object reps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = report.toString()+","+reps.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ETIQUETA ::= estilo cierra ESTIS abre bar estilo 
            {
              Object RESULT =null;
		int estilleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int estilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String estil = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int estsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int estsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object ests = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		RESULT = estil.toString()+","+ests.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETA",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ENCAS ::= ENCAS ENCA 
            {
              Object RESULT =null;
		int ecnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ecnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ecn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = ecn.toString()+o+":"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ENCAS ::= ENCA 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
RESULT = o.toString()+":"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCAS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERS ::= CUERS CUER 
            {
              Object RESULT =null;
		int crsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int crsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object crs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = crs.toString()+cr.toString()+":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERS ::= CUER 
            {
              Object RESULT =null;
		int crleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int crright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cr.toString()+":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUERS",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PONDS ::= PONDS POND 
            {
              Object RESULT =null;
		int pdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pds = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pds.toString()+ pd.toString()+":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PONDS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // PONDS ::= POND 
            {
              Object RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = pd.toString()+":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PONDS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // REPORS ::= REPORS REPOR 
            {
              Object RESULT =null;
		int repsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int repsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object reps = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int repleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int repright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= reps.toString()+rep.toString()+":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPORS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // REPORS ::= REPOR 
            {
              Object RESULT =null;
		int repleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int repright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rep = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= rep.toString()+":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPORS",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTIS ::= ESTIS ESTI 
            {
              Object RESULT =null;
		int estsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int estsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ests = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int estleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object est = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=ests.toString()+est.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTIS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTIS ::= ESTI 
            {
              Object RESULT =null;
		int estleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object est = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=est.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTIS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ENCA ::= id dosPuntos TIPODATO igual TIPOCADENA 
            {
              Object RESULT =null;
		int posleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int posright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String pos = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

RESULT= pos.toString()+","+a.toString()+","+b.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ENCA",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPODATO ::= escuela 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPODATO ::= curso 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPODATO ::= docente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPODATO ::= seccion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPODATO ::= semestre 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPODATO ::= año 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPODATO",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPOCADENA ::= cadena 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOCADENA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPOCADENA ::= valorNumerico 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOCADENA",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CUER ::= abre estudiante ESTUS bar cierra 
            {
              Object RESULT =null;
		int estsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int estsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ests = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = ests.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CUER",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ESTUS ::= ESTUS coma ESTU 
            {
              Object RESULT =null;
		int estsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int estsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ests = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int estleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object est = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ests.toString()+est.toString()+ ",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTUS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTUS ::= ESTU 
            {
              Object RESULT =null;
		int estleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object est = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = est.toString()+ ",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTUS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESTU ::= id igual TIPOCADENA 
            {
              Object RESULT =null;
		int dat1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dat1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dat1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dat1.toString()+ "," +b.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTU",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // POND ::= abre IDES bar cierra 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = ids.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("POND",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IDES ::= IDES IDE 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =ids.toString()+ ","+ id.toString()+",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IDES ::= IDE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = id.toString()+",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDES",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IDE ::= id valor igual porcentaje 
            {
              Object RESULT =null;
		int datleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int datright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String dat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int porleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int porright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String por = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= dat.toString()+","+val.toString()+","+por.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IDE",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // REPOR ::= DRE igual BOL 
            {
              Object RESULT =null;
		int reporleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int reporright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object repor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int jackyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jackyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object jacky = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= repor.toString() +","+ jacky.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REPOR",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DRE ::= ra 
            {
              Object RESULT =null;
		int reporleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reporright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String repor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = repor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DRE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DRE ::= rr 
            {
              Object RESULT =null;
		int reporleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reporright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String repor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = repor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DRE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DRE ::= re 
            {
              Object RESULT =null;
		int reporleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reporright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String repor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = repor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DRE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DRE ::= rp 
            {
              Object RESULT =null;
		int reporleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int reporright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String repor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = repor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DRE",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BOL ::= verdadero 
            {
              Object RESULT =null;
		int jackyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jackyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jacky = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = jacky;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BOL ::= falso 
            {
              Object RESULT =null;
		int jackyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jackyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String jacky = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = jacky;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BOL",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ESTI ::= SENCA SCUERPO 
            {
              Object RESULT =null;
		int noleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int noright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object no = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sculeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scuright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object scu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT=no.toString()+scu.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ESTI",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENCA ::= abre encabezado SSENCA bar cierra 
            {
              Object RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT= ee.toString()+":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENCA",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SCUERPO ::= abre cuerpo SSCUERPO bar cierra 
            {
              Object RESULT =null;
		int ssculeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sscuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sscu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT=sscu.toString()+":";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SCUERPO",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SSENCA ::= SSENCA coma EN 
            {
              Object RESULT =null;
		int eeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ee = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ee.toString()+e.toString()+",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SSENCA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SSENCA ::= EN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= e+",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SSENCA",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EN ::= COLE igual cadena 
            {
              Object RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object tt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tt.toString() +","+ cad.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EN",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COLE ::= ct 
            {
              Object RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // COLE ::= cv 
            {
              Object RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // COLE ::= logo 
            {
              Object RESULT =null;
		int ttleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ttright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = tt;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SSCUERPO ::= SSCUERPO coma CU 
            {
              Object RESULT =null;
		int ssculeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sscuright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object sscu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= sscu.toString()+cu.toString()+",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SSCUERPO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SSCUERPO ::= CU 
            {
              Object RESULT =null;
		int culeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int curight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cu = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT= cu+",";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SSCUERPO",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CU ::= COLC igual TIPOES 
            {
              Object RESULT =null;
		int yyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int yyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object yy = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object xx = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = yy.toString() +","+ xx.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CU",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TIPOES ::= cadena 
            {
              Object RESULT =null;
		int xxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String xx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = xx;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOES",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIPOES ::= verdadero 
            {
              Object RESULT =null;
		int xxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String xx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = xx;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOES",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIPOES ::= falso 
            {
              Object RESULT =null;
		int xxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String xx = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = xx;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPOES",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // COLC ::= cc 
            {
              Object RESULT =null;
		int yyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String yy = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = yy;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // COLC ::= na 
            {
              Object RESULT =null;
		int yyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String yy = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = yy;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // COLC ::= nr 
            {
              Object RESULT =null;
		int yyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String yy = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = yy;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COLC ::= bordes 
            {
              Object RESULT =null;
		int yyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String yy = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = yy;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COLC",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
