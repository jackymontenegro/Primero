
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import proyecto1compi.*;
import Listas.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\006\004\000\002\006\003\000\002\003\012" +
    "\000\002\004\004\000\002\004\003\000\002\005\012\000" +
    "\002\046\006\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\003\000\002\042\005\000\002\030" +
    "\005\000\002\030\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\006\000\002\027\011\000\002\035\004\000" +
    "\002\035\003\000\002\047\002\000\002\007\013\000\002" +
    "\050\002\000\002\007\013\000\002\051\002\000\002\007" +
    "\014\000\002\052\002\000\002\007\016\000\002\053\002" +
    "\000\002\007\014\000\002\054\002\000\002\007\016\000" +
    "\002\055\002\000\002\007\016\000\002\007\007\000\002" +
    "\013\004\000\002\013\003\000\002\014\005\000\002\031" +
    "\005\000\002\031\003\000\002\034\004\000\002\034\003" +
    "\000\002\045\004\000\002\045\003\000\002\022\005\000" +
    "\002\022\003\000\002\025\004\000\002\025\003\000\002" +
    "\020\004\000\002\020\003\000\002\011\012\000\002\015" +
    "\003\000\002\015\003\000\002\021\004\000\002\021\003" +
    "\000\002\010\012\000\002\017\003\000\002\017\003\000" +
    "\002\040\003\000\002\040\003\000\002\012\005\000\002" +
    "\032\003\000\002\032\003\000\002\033\012\000\002\056" +
    "\002\000\002\044\014\000\002\024\012\000\002\023\005" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\036\005\000\002\043\004\000\002\043\003\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\006\000\002\037\006\000\002\037\005" +
    "\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\014\004\001\002\000\006\004\115\023" +
    "\014\001\002\000\006\002\ufffd\014\ufffd\001\002\000\006" +
    "\002\000\014\113\001\002\000\006\002\ufffa\014\ufffa\001" +
    "\002\000\004\002\112\001\002\000\006\002\uffff\014\012" +
    "\001\002\000\004\023\014\001\002\000\006\002\ufffb\014" +
    "\ufffb\001\002\000\004\014\015\001\002\000\004\024\016" +
    "\001\002\000\004\025\024\001\002\000\004\014\020\001" +
    "\002\000\004\023\021\001\002\000\004\015\022\001\002" +
    "\000\004\014\023\001\002\000\006\002\ufff9\014\ufff9\001" +
    "\002\000\010\007\027\010\025\032\026\001\002\000\006" +
    "\026\ufff6\033\ufff6\001\002\000\006\026\ufff7\033\ufff7\001" +
    "\002\000\006\026\ufff5\033\ufff5\001\002\000\006\026\031" +
    "\033\032\001\002\000\006\022\034\031\036\001\002\000" +
    "\004\014\ufff4\001\002\000\004\014\ufff8\001\002\000\004" +
    "\016\107\001\002\000\010\033\103\043\104\044\105\001" +
    "\002\000\004\034\040\001\002\000\010\033\ufff1\043\ufff1" +
    "\044\ufff1\001\002\000\004\022\041\001\002\000\004\016" +
    "\042\001\002\000\004\016\043\001\002\000\010\020\046" +
    "\021\045\036\047\001\002\000\020\014\uffb8\015\uffb8\017" +
    "\uffb8\033\uffb8\035\uffb8\043\uffb8\044\uffb8\001\002\000\020" +
    "\014\uffba\015\uffba\017\uffba\033\uffba\035\uffba\043\uffba\044" +
    "\uffba\001\002\000\020\014\uffb9\015\uffb9\017\uffb9\033\uffb9" +
    "\035\uffb9\043\uffb9\044\uffb9\001\002\000\012\020\056\027" +
    "\054\030\053\034\055\001\002\000\004\035\051\001\002" +
    "\000\010\033\uffed\043\uffed\044\uffed\001\002\000\024\015" +
    "\065\020\uffb5\027\uffb5\030\uffb5\034\uffb5\037\uffb5\040\063" +
    "\041\064\042\062\001\002\000\004\034\077\001\002\000" +
    "\004\034\074\001\002\000\012\020\056\027\054\030\053" +
    "\034\055\001\002\000\026\015\uffad\020\uffad\027\uffad\030" +
    "\uffad\034\uffad\035\uffad\037\uffad\040\uffad\041\uffad\042\uffad" +
    "\001\002\000\014\020\056\027\054\030\053\034\055\037" +
    "\061\001\002\000\024\015\065\020\uffb6\027\uffb6\030\uffb6" +
    "\034\uffb6\037\uffb6\040\063\041\064\042\062\001\002\000" +
    "\020\014\uffb7\015\uffb7\017\uffb7\033\uffb7\035\uffb7\043\uffb7" +
    "\044\uffb7\001\002\000\012\020\056\027\054\030\053\034" +
    "\055\001\002\000\012\020\056\027\054\030\053\034\055" +
    "\001\002\000\012\020\056\027\054\030\053\034\055\001" +
    "\002\000\012\020\056\027\054\030\053\034\055\001\002" +
    "\000\026\015\uffb3\020\uffb3\027\uffb3\030\uffb3\034\uffb3\035" +
    "\uffb3\037\uffb3\040\063\041\uffb3\042\062\001\002\000\026" +
    "\015\uffb4\020\uffb4\027\uffb4\030\uffb4\034\uffb4\035\uffb4\037" +
    "\uffb4\040\063\041\uffb4\042\062\001\002\000\026\015\uffb1" +
    "\020\uffb1\027\uffb1\030\uffb1\034\uffb1\035\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\001\002\000\026\015\uffb2\020\uffb2" +
    "\027\uffb2\030\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\041" +
    "\uffb2\042\uffb2\001\002\000\014\015\065\035\073\040\063" +
    "\041\064\042\062\001\002\000\026\015\uffae\020\uffae\027" +
    "\uffae\030\uffae\034\uffae\035\uffae\037\uffae\040\uffae\041\uffae" +
    "\042\uffae\001\002\000\012\020\056\027\054\030\053\034" +
    "\055\001\002\000\014\015\065\035\076\040\063\041\064" +
    "\042\062\001\002\000\026\015\uffb0\020\uffb0\027\uffb0\030" +
    "\uffb0\034\uffb0\035\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0" +
    "\001\002\000\012\020\056\027\054\030\053\034\055\001" +
    "\002\000\014\015\065\035\101\040\063\041\064\042\062" +
    "\001\002\000\026\015\uffaf\020\uffaf\027\uffaf\030\uffaf\034" +
    "\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\001\002" +
    "\000\006\022\034\031\036\001\002\000\004\014\ufff3\001" +
    "\002\000\006\022\uffef\031\uffef\001\002\000\006\022\ufff0" +
    "\031\ufff0\001\002\000\010\033\ufff2\043\ufff2\044\ufff2\001" +
    "\002\000\004\016\110\001\002\000\010\020\046\021\045" +
    "\036\047\001\002\000\010\033\uffee\043\uffee\044\uffee\001" +
    "\002\000\004\002\001\001\002\000\004\004\115\001\002" +
    "\000\006\002\ufffe\014\ufffe\001\002\000\004\014\116\001" +
    "\002\000\004\014\117\001\002\000\014\005\130\006\126" +
    "\007\131\010\124\013\125\001\002\000\004\014\uffeb\001" +
    "\002\000\004\014\122\001\002\000\016\004\127\005\130" +
    "\006\126\007\131\010\124\013\125\001\002\000\004\014" +
    "\uffec\001\002\000\004\022\310\001\002\000\004\022\301" +
    "\001\002\000\004\014\253\001\002\000\004\015\251\001" +
    "\002\000\004\014\226\001\002\000\004\022\132\001\002" +
    "\000\004\016\133\001\002\000\006\020\135\021\134\001" +
    "\002\000\006\014\205\017\uffc1\001\002\000\006\014\154" +
    "\017\uffc0\001\002\000\004\017\137\001\002\000\004\022" +
    "\uffe2\001\002\000\004\022\141\001\002\000\004\016\150" +
    "\001\002\000\006\015\uffd7\017\uffd7\001\002\000\006\015" +
    "\145\017\144\001\002\000\004\022\141\001\002\000\004" +
    "\014\146\001\002\000\004\014\uffe1\001\002\000\006\015" +
    "\uffd8\017\uffd8\001\002\000\006\020\152\021\151\001\002" +
    "\000\012\014\uffc1\015\uffc1\017\uffc1\022\uffc1\001\002\000" +
    "\012\014\uffc0\015\uffc0\017\uffc0\022\uffc0\001\002\000\006" +
    "\015\uffc2\017\uffc2\001\002\000\004\014\uffde\001\002\000" +
    "\004\014\156\001\002\000\004\010\163\001\002\000\004" +
    "\014\161\001\002\000\004\014\uffd3\001\002\000\006\007" +
    "\164\010\163\001\002\000\004\014\uffd4\001\002\000\004" +
    "\022\167\001\002\000\004\015\165\001\002\000\004\014" +
    "\166\001\002\000\004\014\uffdd\001\002\000\004\016\170" +
    "\001\002\000\006\020\152\021\151\001\002\000\004\017" +
    "\172\001\002\000\004\022\uffbe\001\002\000\004\022\175" +
    "\001\002\000\006\015\uffd1\017\uffd1\001\002\000\004\016" +
    "\203\001\002\000\006\015\200\017\177\001\002\000\004" +
    "\022\175\001\002\000\004\014\201\001\002\000\004\014" +
    "\uffbd\001\002\000\006\015\uffd2\017\uffd2\001\002\000\010" +
    "\020\046\021\045\036\047\001\002\000\006\015\uffbb\017" +
    "\uffbb\001\002\000\004\014\uffe0\001\002\000\004\014\207" +
    "\001\002\000\004\022\214\001\002\000\004\014\uffd5\001" +
    "\002\000\004\014\212\001\002\000\006\007\215\022\214" +
    "\001\002\000\004\014\uffd6\001\002\000\004\014\220\001" +
    "\002\000\004\015\216\001\002\000\004\014\217\001\002" +
    "\000\004\014\uffdf\001\002\000\006\020\152\021\151\001" +
    "\002\000\004\014\222\001\002\000\004\022\223\001\002" +
    "\000\004\015\224\001\002\000\004\014\225\001\002\000" +
    "\004\014\uffbf\001\002\000\004\014\230\001\002\000\004" +
    "\014\uffcd\001\002\000\004\022\235\001\002\000\004\014" +
    "\233\001\002\000\004\014\uffce\001\002\000\006\005\uffea" +
    "\022\235\001\002\000\004\005\246\001\002\000\004\014" +
    "\236\001\002\000\006\020\241\022\240\001\002\000\004" +
    "\014\242\001\002\000\004\014\uffca\001\002\000\004\014" +
    "\uffcb\001\002\000\004\022\243\001\002\000\004\015\244" +
    "\001\002\000\004\014\245\001\002\000\004\014\uffcc\001" +
    "\002\000\004\015\247\001\002\000\004\014\250\001\002" +
    "\000\004\014\uffe9\001\002\000\004\014\252\001\002\000" +
    "\006\002\ufffc\014\ufffc\001\002\000\004\014\uffe8\001\002" +
    "\000\004\014\255\001\002\000\004\022\262\001\002\000" +
    "\004\014\260\001\002\000\004\014\uffc8\001\002\000\006" +
    "\006\263\022\262\001\002\000\004\014\uffc9\001\002\000" +
    "\004\014\266\001\002\000\004\015\264\001\002\000\004" +
    "\014\265\001\002\000\004\014\uffe7\001\002\000\012\020" +
    "\241\021\270\022\240\045\273\001\002\000\004\014\274" +
    "\001\002\000\004\014\uffc4\001\002\000\004\014\uffc6\001" +
    "\002\000\004\014\uffc5\001\002\000\004\014\uffc3\001\002" +
    "\000\004\022\275\001\002\000\004\015\276\001\002\000" +
    "\004\014\277\001\002\000\004\014\uffc7\001\002\000\006" +
    "\015\uffda\022\uffda\001\002\000\004\016\306\001\002\000" +
    "\006\015\304\022\301\001\002\000\006\015\uffdb\022\uffdb" +
    "\001\002\000\004\014\305\001\002\000\004\014\uffdc\001" +
    "\002\000\006\020\152\021\151\001\002\000\006\015\uffd9" +
    "\022\uffd9\001\002\000\004\016\311\001\002\000\006\020" +
    "\152\021\312\001\002\000\006\014\321\017\uffc1\001\002" +
    "\000\004\017\314\001\002\000\004\022\uffe6\001\002\000" +
    "\004\022\175\001\002\000\006\015\317\017\177\001\002" +
    "\000\004\014\320\001\002\000\004\014\uffe5\001\002\000" +
    "\004\014\uffe4\001\002\000\004\014\323\001\002\000\004" +
    "\022\331\001\002\000\004\014\uffcf\001\002\000\004\014" +
    "\326\001\002\000\006\010\330\022\331\001\002\000\004" +
    "\014\uffd0\001\002\000\004\015\340\001\002\000\004\014" +
    "\332\001\002\000\010\020\046\021\045\036\047\001\002" +
    "\000\004\014\334\001\002\000\004\022\335\001\002\000" +
    "\004\015\336\001\002\000\004\014\337\001\002\000\004" +
    "\014\uffbc\001\002\000\004\014\341\001\002\000\004\014" +
    "\uffe3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\014\002\007\003\004\004\010\005\006\006" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\032\001\001\000\006\027\036\030\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\047\036\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\051\043\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\071" +
    "\001\001\000\002\001\001\000\004\037\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\070\001\001" +
    "\000\004\037\067\001\001\000\004\037\066\001\001\000" +
    "\004\037\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\110\036\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\117\035\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\301\014\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\053\137" +
    "\001\001\000\006\012\141\031\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\152\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\154\001\001\000" +
    "\006\044\157\045\156\001\001\000\002\001\001\000\004" +
    "\044\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\170\001\001\000\002\001\001\000\004\056\172\001\001" +
    "\000\006\022\175\023\173\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\203\036\043\001\001\000\002\001\001\000\004" +
    "\054\205\001\001\000\006\033\207\034\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\226\020\230\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\231\001\001\000\002\001\001\000\004" +
    "\047\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\253\001\001\000\006\010\256\021\255" +
    "\001\001\000\002\001\001\000\004\010\260\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\015\270\017\266\040\271\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\302\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\314\001\001\000\006\022\315\023\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\321\001\001\000\006\024\323\025\324\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\332\036\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





 public String operacion = " ";
public String imprime = " ";
public static ArrayList< Atributos> listaA = new ArrayList<Atributos>(); 
public static ArrayList< Atributos> listaB = new ArrayList<Atributos>(); 
public static ArrayList< Atributos> listaC = new ArrayList<Atributos>(); 
public static ArrayList< Atributos> listaAux = new ArrayList<Atributos>(); 
public static int cont = 1;
public static int cont2 = 1;
public static int cont3 = 1;
public static int cont4 = 1;
public static int cont5 = 1;

        String hola = " ";

        String nom = " ";
        String num = " ";
        
        public static boolean banderita = false;
        boolean c1 = false;
        boolean c2 = false;
        boolean c3 = false;
        boolean c4 = false;
        boolean c5 = false;
        boolean c6 = false;
        boolean c7 = false;
        boolean c8 = false;
        boolean c9 = false;
        boolean c10= false;
        boolean c11 = false;
        boolean c12 = false;
        boolean c13= false;
        boolean c14= false;
        boolean c15= false;
        boolean c16= false;
        boolean c17 = false;
        boolean c18 = false;
        boolean c19= false;
        boolean c20= false;
        boolean c21= false;
        boolean c22= false;
        boolean c23= false;
        boolean c24= false;
        boolean c25= false;
        boolean c26= false;
        boolean c27= false;
        boolean c28= false;
        boolean c29= false;
        boolean c30= false;

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
erroresList error =new erroresList("ERROR SINTACTICO: ",". Identificador "
        +s.value + " no reconocido.","FILA:  "+(s.right+1),"COLUMNA:  "+(s.left+1),"SE ESPERABA OTRA PALABRA");
        ventanaPrincipal.errorLex.add(error);
        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");

erroresList error =new erroresList("ERROR SINTACTICO: ",". Identificador "
        +s.value + " no reconocido.","FILA:  "+(s.right+1),"COLUMNA:  "+(s.left+1),"SE ESPERABA OTRA PALABRA");
        ventanaPrincipal.errorLex.add(error);
        
    
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Nodo raiz=null;
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= REQS 
            {
              String RESULT =null;
		
System.out.println("ESTOY EN INICIO");
/*for ( int i = 0; i<ventanaPrincipal.usuarioList.size();i++){
System.out.println(ventanaPrincipal.usuarioList.get(i).getCodigo());
}*/



              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= QUES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REQS ::= REQS REQ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REQS ::= REQ 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // REQ ::= dolar req dolar RQSS dolar req menos dolar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // QUES ::= QUES QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // QUES ::= QUE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // QUE ::= dolar query dolar CQUERY dolar query menos dolar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CQUERY ::= extraer de M ES 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CQUERY",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // M ::= usuario 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // M ::= producto 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // M ::= tienda 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ES ::= pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES ::= donde VAL4S pyc 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAL4S ::= VAL4S VAL3 VAL4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL4S",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAL4S ::= VAL4 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL4S",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VAL3 ::= or 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VAL3 ::= and 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VAL4 ::= iden igual igual VAL6 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAL4 ::= n pabre iden igual igual VAL6 pcierra 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RQSS ::= RQSS REQINS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RQSS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RQSS ::= REQINS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RQSS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$0 ::= 
            {
              String RESULT =null;

                    listaAux = new ArrayList<Atributos>();
                    c22=false;
                    c23=false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // REQINS ::= dolar iniciou dolar USUARIOIS dolar NT$0 iniciou menos dolar 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$1 ::= 
            {
              String RESULT =null;
listaA=new ArrayList<Atributos>();
                c1=false;
                c2=false;
                c3=false;
                c4=false;
                c5=false;
                c6=false;
                c7=false;
                banderita = false;
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // REQINS ::= dolar crearu dolar NT$1 USUARIOCS dolar crearu menos dolar 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		/*for ( int i = 0; i<listaA.size();i++){
                System.out.println(listaA.get(i).getTitulo());
                }*/

                

                elemento usuario = new elemento(cont,listaA);

                ventanaPrincipal verifica = new ventanaPrincipal();
                verifica.existeU(usuario);

                //System.out.println(banderita);
                if(banderita == false){
                ventanaPrincipal.usuarioList.add(usuario);
                cont++;
                }
                

                
                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              String RESULT =null;
		int proidenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int proidenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String proiden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  
                    listaAux = new ArrayList<Atributos>();
                    String pri =proiden;
                    String pri2 =va5;
                    Atributos m = new Atributos(pri,pri2);
                    listaAux.add(m);
                    c22=false;
                    c23=false;
                    c24=false;
                    c25=false;
                    c26=false;
                    c27=false;
                    c28=false;
                    c29=false;
                    c30=false;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REQINS ::= dolar producto iden igual VAL5 coma NT$2 PRODUSS menos dolar 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int proidenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int proidenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String proiden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                ventanaPrincipal com = new ventanaPrincipal();
                com.comparadorP(listaAux);

                elemento moP = new elemento(cont4,listaAux);
                ventanaPrincipal.modificaPList.add(moP);
                cont4++;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              String RESULT =null;
listaB=new ArrayList<Atributos>();
                c8=false;
                c9=false;
                c10=false;
                c11=false;
                c12=false;
                c13=false;
                c14=false;
                c15=false;
                banderita = false;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REQINS ::= dolar producto iden igual cadena dolar NT$3 PRODUSS1 dolar producto menos dolar 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		/*for ( int i = 0; i<listaB.size();i++){
                System.out.println(listaB.get(i).getTitulo());
                }*/

                elemento producto = new elemento(cont2,listaB);

                ventanaPrincipal verifica = new ventanaPrincipal();
                verifica.creacionP(producto);

                if(banderita == false){
                ventanaPrincipal.productoList.add(producto);
                cont2++;
                }

                

             
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$4 ::= 
            {
              String RESULT =null;
		int proidenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int proidenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String proiden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  
                    listaAux = new ArrayList<Atributos>();
                    String pri =proiden;
                    String pri2 =va5;
                    Atributos m = new Atributos(pri,pri2);
                    listaAux.add(m);
                    c22=false;
                    c23=false;
                    c24=false;
                    c25=false;
                    c26=false;
                    c27=false;
                    c28=false;
                    c29=false;
                    c30=false;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // REQINS ::= dolar tienda iden igual VAL5 coma NT$4 TIENSS menos dolar 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int proidenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int proidenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String proiden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                ventanaPrincipal com = new ventanaPrincipal();
                com.comparadorT(listaAux);

                elemento moT = new elemento(cont5,listaAux);

                ventanaPrincipal verifica = new ventanaPrincipal();
                verifica.modificaT(moT);
                
                ventanaPrincipal.modificaTList.add(moT);
                cont5++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$5 ::= 
            {
              String RESULT =null;
listaC=new ArrayList<Atributos>();
                c16=false;
                c17=false;
                c18=false;
                c19=false;
                c20=false;
                c21=false;
                banderita = false;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // REQINS ::= dolar tienda iden igual cadena dolar NT$5 TIENSS1 dolar tienda menos dolar 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		/*for ( int i = 0; i<listaC.size();i++){
                System.out.println(listaC.get(i).getTitulo());
                }*/

                elemento tienda = new elemento(cont3,listaC);


                ventanaPrincipal verifica = new ventanaPrincipal();
                verifica.creacionT(tienda);

                if(banderita == false){
                ventanaPrincipal.tiendaList.add(tienda);
                cont3++;
                }

                

                
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$6 ::= 
            {
              String RESULT =null;
		int proidenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int proidenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String proiden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  
                    nom = proiden.toString();
                    num = vn.toString();
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // REQINS ::= dolar tienda iden igual valorNumerico dolar NT$6 TIENSS2 dolar tienda menos dolar 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int proidenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int proidenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String proiden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int vnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int vnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String vn = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // REQINS ::= dolar get GTS menos dolar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // GTS ::= GTS GT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GTS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // GTS ::= GT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GTS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // GT ::= iden igual VAL5 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIENSS ::= TIENSS coma TIENS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIENSS ::= TIENS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIENSS1 ::= TIENSS1 TIENS1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIENSS1 ::= TIENS1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIENSS2 ::= TIENSS2 TIENS2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIENSS2 ::= TIENS2 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PRODUSS ::= PRODUSS coma PRODUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUSS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRODUSS ::= PRODUS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUSS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRODUSS1 ::= PRODUSS1 PRODUS1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUSS1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRODUSS1 ::= PRODUS1 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUSS1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // USUARIOIS ::= USUARIOIS USUARIOI 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOIS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // USUARIOIS ::= USUARIOI 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOIS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // USUARIOI ::= dolar iden dolar VAL1 dolar iden menos dolar 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOI",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // VAL1 ::= valorNumerico 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // VAL1 ::= iden 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // USUARIOCS ::= USUARIOCS USUARIOC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOCS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // USUARIOCS ::= USUARIOC 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOCS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // USUARIOC ::= dolar iden dolar VAL2 dolar iden menos dolar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = e.toString()+d.toString();
            imprime = e.toString(); 
           if("nombre".equals(imprime)){
                if(c1==false){
                Atributos nuevo = new Atributos(e.toString(),d.toString());
                listaA.add(nuevo);               
                c1 = true;
                }else{
                System.out.println("YA SE AGREGO NOMBRE");
                }
                
            } else if("apellido".equals(imprime)){
                if(c2==false){
                Atributos nuevo = new Atributos(e.toString(),d.toString());
                listaA.add(nuevo);               
                c2 = true;
                }else{
                System.out.println("YA SE AGREGO APELLIDO");
                }
                
            } else if("id".equals(imprime)){
                if(c3==false){
                Atributos nuevo = new Atributos(e.toString(),d.toString());
                listaA.add(nuevo);               
                c3 = true;
                }else{
                System.out.println("YA SE AGREGO ID");
                }
                
            } else if("password".equals(imprime)){
                if(c4==false){
                Atributos nuevo = new Atributos(e.toString(),d.toString());
                listaA.add(nuevo);               
                c4 = true;
                }else{
                System.out.println("YA SE AGREGO PASSWORD");
                }
                
            } else if("telefono".equals(imprime)){
                if(c5==false){
                Atributos nuevo = new Atributos(e.toString(),d.toString());
                listaA.add(nuevo);               
                c5 = true;
                }else{
                System.out.println("YA SE AGREGO TELEFONO");
                }
                
            } else if("email".equals(imprime)){

                if(c6==false){
                Atributos nuevo = new Atributos(e.toString(),d.toString());
                listaA.add(nuevo);               
                c6 = true;
                }else{
                System.out.println("YA SE AGREGO EMAIL");
                }
                
            } else if("direccion".equals(imprime)){
                if(c7==false){
                Atributos nuevo = new Atributos(e.toString(),d.toString());
                listaA.add(nuevo);               
                c7 = true;
                }else{
                System.out.println("YA SE AGREGO DIRECCION");
                }
                
            }
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VAL2 ::= VAL1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VAL2 ::= T 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // T ::= cadena 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // T ::= corr 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = c.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // TIENS ::= iden igual VAL5 
            {
              String RESULT =null;
		int cadtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadt = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cadt.toString()+va5.toString();          
           imprime = cadt.toString(); 
           if("codigo".equals(imprime)){
                if(c22==false){
                Atributos nuevoAu = new Atributos( cadt.toString(),va5.toString());
                listaAux.add(nuevoAu);                
                c22 = true;
                }else{
                System.out.println("YA SE AGREGO CODIGO");
                }
                
            } else if("nombre".equals(imprime)){
                if(c23==false){
                Atributos nuevoAu = new Atributos( cadt.toString(),va5.toString());
                listaAux.add(nuevoAu);            
                c23 = true;
                }else{
                System.out.println("YA SE AGREGO NOMBRE");
                }
                
            } else if("propietario".equals(imprime)){
                if(c24==false){
               Atributos nuevoAu = new Atributos( cadt.toString(),va5.toString());
                listaAux.add(nuevoAu);                 
                c24 = true;
                }else{
                System.out.println("YA SE AGREGO PROPIETARIO");
                }
                
            } else if("img".equals(imprime)){
                if(c25==false){
                Atributos nuevoAu = new Atributos( cadt.toString(),va5.toString());
                listaAux.add(nuevoAu);              
                c25 = true;
                }else{
                System.out.println("YA SE AGREGO IMG");
                }
                
            } else if("direccion".equals(imprime)){
                if(c26==false){
                Atributos nuevoAu = new Atributos( cadt.toString(),va5.toString());
                listaAux.add(nuevoAu);                 
                c26= true;
                }else{
                System.out.println("YA SE AGREGO DIRECCION");
                }
                
            }else if("telefono".equals(imprime)){
                if(c27==false){
                Atributos nuevoAu = new Atributos( cadt.toString(),va5.toString());
                listaAux.add(nuevoAu);                  
                c27 = true;
                }else{
                System.out.println("YA SE AGREGO TELEFONO");
                }
                
            } else if("tipo".equals(imprime)){
                if(c28==false){
                Atributos nuevoAu = new Atributos( cadt.toString(),va5.toString());
                listaAux.add(nuevoAu);                   
                c28 = true;
                }else{
                System.out.println("YA SE AGREGO TIPO");
                }
                
            } 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAL5 ::= cadena 
            {
              String RESULT =null;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = va5.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAL5 ::= valorNumerico 
            {
              String RESULT =null;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = va5.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIENS1 ::= dolar iden dolar VAL5 dolar iden menos dolar 
            {
              String RESULT =null;
		int tie1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tie1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String tie1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = tie1.toString()+va5.toString();          
           imprime = tie1.toString(); 
           if("codigo".equals(imprime)){
                if(c16==false){
                Atributos nuevo3 = new Atributos( tie1.toString(),va5.toString());
                listaC.add(nuevo3);         
                c16 = true;
                }else{
                System.out.println("YA SE AGREGO CODIGO");
                }
                
            } else if("nombre".equals(imprime)){
                if(c17==false){
                Atributos nuevo3 = new Atributos( tie1.toString(),va5.toString());
                listaC.add(nuevo3); 
                c17 = true;
                }else{
                System.out.println("YA SE AGREGO NOMBRE");
                }
                
            } else if("propietario".equals(imprime)){
                if(c18==false){
               Atributos nuevo3 = new Atributos( tie1.toString(),va5.toString());
                listaC.add(nuevo3);              
                c18 = true;
                }else{
                System.out.println("YA SE AGREGO PROPIETARIO");
                }
                
            } else if("img".equals(imprime)){
                if(c19==false){
                Atributos nuevo3 = new Atributos( tie1.toString(),va5.toString());
                listaC.add(nuevo3);              
                c19 = true;
                }else{
                System.out.println("YA SE AGREGO IMG");
                }
                
            } else if("direccion".equals(imprime)){
                if(c20==false){
                Atributos nuevo3 = new Atributos( tie1.toString(),va5.toString());
                listaC.add(nuevo3);               
                c20 = true;
                }else{
                System.out.println("YA SE AGREGO DIRECCION");
                }
                
            }else if("telefono".equals(imprime)){
                if(c21==false){
                Atributos nuevo3 = new Atributos( tie1.toString(),va5.toString());
                listaC.add(nuevo3);              
                c21 = true;
                }else{
                System.out.println("YA SE AGREGO TELEFONO");
                }
                
            }
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENS1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$7 ::= 
            {
              String RESULT =null;
		int proidenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int proidenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String proiden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
  
                    listaAux = new ArrayList<Atributos>();
                    String ri =proiden;
                    String ri2 =va5;
                    Atributos m3 = new Atributos(nom,num);
                    Atributos m2 = new Atributos(ri,ri2);
                    listaAux.add(m3);
                    listaAux.add(m2);
                    c22=false;
                    c23=false;
                    c24=false;
                    c25=false;
                    c26=false;
                    c27=false;
                    c28=false;
                    c29=false;
                    c30=false;

                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIENS2 ::= dolar producto iden igual VAL5 coma NT$7 PRODUSS menos dolar 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int proidenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int proidenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String proiden = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int va5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int va5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String va5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                ventanaPrincipal com = new ventanaPrincipal();
                com.comparadorP(listaAux);

                elemento moP = new elemento(cont4,listaAux);
                ventanaPrincipal.modificaPList.add(moP);
                cont4++;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENS2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PRODUS1 ::= dolar iden dolar VAL6 dolar iden menos dolar 
            {
              String RESULT =null;
		int pro1ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pro1iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String pro1i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int va6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int va6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String va6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		RESULT = pro1i.toString()+va6.toString();          
           imprime = pro1i.toString(); 
           if("codigo".equals(imprime)){
                if(c8==false){
                Atributos nuevo2 = new Atributos( pro1i.toString(),va6.toString());
                listaB.add(nuevo2);                
                c8 = true;
                }else{
                System.out.println("YA SE AGREGO CODIGO");
                }
                
            } else if("nombre".equals(imprime)){
                if(c9==false){
                Atributos nuevo2 = new Atributos( pro1i.toString(),va6.toString());
                listaB.add(nuevo2);               
                c9 = true;
                }else{
                System.out.println("YA SE AGREGO NOMBRE");
                }
                
            } else if("cantidad".equals(imprime)){
                if(c10==false){
               Atributos nuevo2 = new Atributos( pro1i.toString(),va6.toString());
                listaB.add(nuevo2);                 
                c10 = true;
                }else{
                System.out.println("YA SE AGREGO CANTIDAD");
                }
                
            } else if("img".equals(imprime)){
                if(c11==false){
                Atributos nuevo2 = new Atributos( pro1i.toString(),va6.toString());
                listaB.add(nuevo2);               
                c11 = true;
                }else{
                System.out.println("YA SE AGREGO IMG");
                }
                
            } else if("marca".equals(imprime)){
                if(c12==false){
                Atributos nuevo2 = new Atributos( pro1i.toString(),va6.toString());
                listaB.add(nuevo2);               
                c12 = true;
                }else{
                System.out.println("YA SE AGREGO MARCA");
                }
                
            }else if("color".equals(imprime)){
                if(c13==false){
                Atributos nuevo2 = new Atributos( pro1i.toString(),va6.toString());
                listaB.add(nuevo2);                
                c13 = true;
                }else{
                System.out.println("YA SE AGREGO COLOR");
                }
                
            } else if("tamaño".equals(imprime)){
                if(c14==false){
                Atributos nuevo2 = new Atributos( pro1i.toString(),va6.toString());
                listaB.add(nuevo2);                
                c14 = true;
                }else{
                System.out.println("YA SE AGREGO TAMAÑO");
                }
                
            } else if("sucursal".equals(imprime)){
                if(c15==false){
                Atributos nuevo2 = new Atributos( pro1i.toString(),va6.toString());
                listaB.add(nuevo2);              
                c15 = true;
                }else{
                System.out.println("YA SE AGREGO SUCURSAL");
                }
                
            }
            
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUS1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRODUS ::= iden igual VAL6 
            {
              String RESULT =null;
		int cadpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cadpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String cadp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int va6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int va6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String va6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = cadp.toString()+va6.toString();          
           imprime = cadp.toString(); 
           if("codigo".equals(imprime)){
                if(c22==false){
                Atributos nuevoAu = new Atributos( cadp.toString(),va6.toString());
                listaAux.add(nuevoAu);                
                c22 = true;
                }else{
                System.out.println("YA SE AGREGO CODIGO");
                }
                
            } else if("nombre".equals(imprime)){
                if(c23==false){
                Atributos nuevoAu = new Atributos( cadp.toString(),va6.toString());
                listaAux.add(nuevoAu);              
                c23 = true;
                }else{
                System.out.println("YA SE AGREGO NOMBRE");
                }
                
            } else if("cantidad".equals(imprime)){
                if(c24==false){
               Atributos nuevoAu = new Atributos( cadp.toString(),va6.toString());
                listaAux.add(nuevoAu);                  
                c24 = true;
                }else{
                System.out.println("YA SE AGREGO CANTIDAD");
                }
                
            } else if("img".equals(imprime)){
                if(c25==false){
                Atributos nuevoAu = new Atributos( cadp.toString(),va6.toString());
                listaAux.add(nuevoAu);                
                c25 = true;
                }else{
                System.out.println("YA SE AGREGO IMG");
                }
                
            } else if("marca".equals(imprime)){
                if(c26==false){
                Atributos nuevoAu = new Atributos( cadp.toString(),va6.toString());
                listaAux.add(nuevoAu);                
                c26= true;
                }else{
                System.out.println("YA SE AGREGO MARCA");
                }
                
            }else if("color".equals(imprime)){
                if(c27==false){
                Atributos nuevoAu = new Atributos( cadp.toString(),va6.toString());
                listaAux.add(nuevoAu);                 
                c27 = true;
                }else{
                System.out.println("YA SE AGREGO COLOR");
                }
                
            } else if("tamaño".equals(imprime)){
                if(c28==false){
                Atributos nuevoAu = new Atributos( cadp.toString(),va6.toString());
                listaAux.add(nuevoAu);                  
                c28 = true;
                }else{
                System.out.println("YA SE AGREGO TAMAÑO");
                }
                
            } else if("sucursal".equals(imprime)){
                if(c29==false){
                Atributos nuevoAu = new Atributos( cadp.toString(),va6.toString());
                listaAux.add(nuevoAu);               
                c29 = true;
                }else{
                System.out.println("YA SE AGREGO SUCURSAL");
                }
                
            }
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VAL6 ::= cadena 
            {
              String RESULT =null;
		int va6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int va6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String va6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = va6.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VAL6 ::= valorNumerico 
            {
              String RESULT =null;
		int va6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int va6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String va6 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = va6.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VAL6 ::= OP 
            {
              String RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String res = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = res.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP ::= llabre OPSS llcierra 
            {
              String RESULT =null;
		int opesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		operacion =  opes.toString();
        // System.out.println("EL RESULTADO ES:  "+operacion );
RESULT = opes.toString();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPSS ::= OPSS OPS 
            {
              String RESULT =null;
		int opesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = opes.toString() +ope.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPSS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPSS ::= OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ope.toString() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPSS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPS ::= OPS mas OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int v1 = Integer.parseInt((String) ope);
        int v2 = Integer.parseInt((String) ope2);
        int suma =  v1+v2;
        RESULT = String.valueOf(suma);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPS ::= OPS menos OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int v1 = Integer.parseInt((String) ope);
        int v2 = Integer.parseInt((String) ope2);
        int resta =  v1-v2;
        RESULT = String.valueOf(resta);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OPS ::= OPS multiplica OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int v1 = Integer.parseInt((String) ope);
        int v2 = Integer.parseInt((String) ope2);
        int mul =  v1*v2;
        RESULT = String.valueOf(mul);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OPS ::= OPS barra OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int v1 = Integer.parseInt((String) ope);
        int v2 = Integer.parseInt((String) ope2);
        int div =  v1/v2;
        RESULT = String.valueOf(div);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OPS ::= rq pabre OPS pcierra 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        int v1 = Integer.parseInt((String) ope);
        int rz = (int) Math.sqrt(v1);
        RESULT = String.valueOf(rz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OPS ::= ptn pabre OPS pcierra 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        int v1 = Integer.parseInt((String) ope);
        int pt =  (int) Math.pow(v1,2);
        RESULT = String.valueOf(pt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OPS ::= pabre OPS pcierra 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ope.toString() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OPS ::= valorNumerico 
            {
              String RESULT =null;
		int esoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eso = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = eso.toString() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
