
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import proyecto1compi.*;
import Listas.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\006\004\000\002\006\003\000\002\003\012" +
    "\000\002\004\004\000\002\004\003\000\002\005\012\000" +
    "\002\046\006\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\003\000\002\042\005\000\002\030" +
    "\005\000\002\030\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\006\000\002\027\011\000\002\035\004\000" +
    "\002\035\003\000\002\007\012\000\002\007\012\000\002" +
    "\007\013\000\002\007\015\000\002\007\013\000\002\007" +
    "\015\000\002\007\015\000\002\007\007\000\002\013\004" +
    "\000\002\013\003\000\002\014\005\000\002\031\005\000" +
    "\002\031\003\000\002\034\004\000\002\034\003\000\002" +
    "\045\004\000\002\045\003\000\002\022\005\000\002\022" +
    "\003\000\002\025\004\000\002\025\003\000\002\020\004" +
    "\000\002\020\003\000\002\011\012\000\002\015\003\000" +
    "\002\015\003\000\002\021\004\000\002\021\003\000\002" +
    "\010\012\000\002\017\003\000\002\017\003\000\002\040" +
    "\003\000\002\040\003\000\002\012\005\000\002\032\003" +
    "\000\002\032\003\000\002\033\012\000\002\044\013\000" +
    "\002\024\012\000\002\023\005\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\036\005\000\002\043" +
    "\004\000\002\043\003\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\006\000" +
    "\002\037\006\000\002\037\005\000\002\037\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\014\004\001\002\000\006\004\115\023" +
    "\014\001\002\000\006\002\ufffd\014\ufffd\001\002\000\006" +
    "\002\000\014\113\001\002\000\006\002\ufffa\014\ufffa\001" +
    "\002\000\004\002\112\001\002\000\006\002\uffff\014\012" +
    "\001\002\000\004\023\014\001\002\000\006\002\ufffb\014" +
    "\ufffb\001\002\000\004\014\015\001\002\000\004\024\016" +
    "\001\002\000\004\025\024\001\002\000\004\014\020\001" +
    "\002\000\004\023\021\001\002\000\004\015\022\001\002" +
    "\000\004\014\023\001\002\000\006\002\ufff9\014\ufff9\001" +
    "\002\000\010\007\027\010\025\032\026\001\002\000\006" +
    "\026\ufff6\033\ufff6\001\002\000\006\026\ufff7\033\ufff7\001" +
    "\002\000\006\026\ufff5\033\ufff5\001\002\000\006\026\031" +
    "\033\032\001\002\000\006\022\034\031\036\001\002\000" +
    "\004\014\ufff4\001\002\000\004\014\ufff8\001\002\000\004" +
    "\016\107\001\002\000\010\033\103\043\104\044\105\001" +
    "\002\000\004\034\040\001\002\000\010\033\ufff1\043\ufff1" +
    "\044\ufff1\001\002\000\004\022\041\001\002\000\004\016" +
    "\042\001\002\000\004\016\043\001\002\000\010\020\047" +
    "\021\045\036\046\001\002\000\020\014\uffc0\015\uffc0\017" +
    "\uffc0\033\uffc0\035\uffc0\043\uffc0\044\uffc0\001\002\000\020" +
    "\014\uffc2\015\uffc2\017\uffc2\033\uffc2\035\uffc2\043\uffc2\044" +
    "\uffc2\001\002\000\012\020\056\027\054\030\053\034\055" +
    "\001\002\000\020\014\uffc1\015\uffc1\017\uffc1\033\uffc1\035" +
    "\uffc1\043\uffc1\044\uffc1\001\002\000\004\035\051\001\002" +
    "\000\010\033\uffed\043\uffed\044\uffed\001\002\000\024\015" +
    "\065\020\uffbd\027\uffbd\030\uffbd\034\uffbd\037\uffbd\040\063" +
    "\041\064\042\062\001\002\000\004\034\077\001\002\000" +
    "\004\034\074\001\002\000\012\020\056\027\054\030\053" +
    "\034\055\001\002\000\026\015\uffb5\020\uffb5\027\uffb5\030" +
    "\uffb5\034\uffb5\035\uffb5\037\uffb5\040\uffb5\041\uffb5\042\uffb5" +
    "\001\002\000\014\020\056\027\054\030\053\034\055\037" +
    "\061\001\002\000\024\015\065\020\uffbe\027\uffbe\030\uffbe" +
    "\034\uffbe\037\uffbe\040\063\041\064\042\062\001\002\000" +
    "\020\014\uffbf\015\uffbf\017\uffbf\033\uffbf\035\uffbf\043\uffbf" +
    "\044\uffbf\001\002\000\012\020\056\027\054\030\053\034" +
    "\055\001\002\000\012\020\056\027\054\030\053\034\055" +
    "\001\002\000\012\020\056\027\054\030\053\034\055\001" +
    "\002\000\012\020\056\027\054\030\053\034\055\001\002" +
    "\000\026\015\uffbb\020\uffbb\027\uffbb\030\uffbb\034\uffbb\035" +
    "\uffbb\037\uffbb\040\063\041\uffbb\042\062\001\002\000\026" +
    "\015\uffbc\020\uffbc\027\uffbc\030\uffbc\034\uffbc\035\uffbc\037" +
    "\uffbc\040\063\041\uffbc\042\062\001\002\000\026\015\uffb9" +
    "\020\uffb9\027\uffb9\030\uffb9\034\uffb9\035\uffb9\037\uffb9\040" +
    "\uffb9\041\uffb9\042\uffb9\001\002\000\026\015\uffba\020\uffba" +
    "\027\uffba\030\uffba\034\uffba\035\uffba\037\uffba\040\uffba\041" +
    "\uffba\042\uffba\001\002\000\014\015\065\035\073\040\063" +
    "\041\064\042\062\001\002\000\026\015\uffb6\020\uffb6\027" +
    "\uffb6\030\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\042\uffb6\001\002\000\012\020\056\027\054\030\053\034" +
    "\055\001\002\000\014\015\065\035\076\040\063\041\064" +
    "\042\062\001\002\000\026\015\uffb8\020\uffb8\027\uffb8\030" +
    "\uffb8\034\uffb8\035\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\001\002\000\012\020\056\027\054\030\053\034\055\001" +
    "\002\000\014\015\065\035\101\040\063\041\064\042\062" +
    "\001\002\000\026\015\uffb7\020\uffb7\027\uffb7\030\uffb7\034" +
    "\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\001\002" +
    "\000\006\022\034\031\036\001\002\000\004\014\ufff3\001" +
    "\002\000\006\022\uffef\031\uffef\001\002\000\006\022\ufff0" +
    "\031\ufff0\001\002\000\010\033\ufff2\043\ufff2\044\ufff2\001" +
    "\002\000\004\016\110\001\002\000\010\020\047\021\045" +
    "\036\046\001\002\000\010\033\uffee\043\uffee\044\uffee\001" +
    "\002\000\004\002\001\001\002\000\004\004\115\001\002" +
    "\000\006\002\ufffe\014\ufffe\001\002\000\004\014\116\001" +
    "\002\000\004\014\117\001\002\000\014\005\130\006\126" +
    "\007\131\010\124\013\125\001\002\000\004\014\uffeb\001" +
    "\002\000\004\014\122\001\002\000\016\004\127\005\130" +
    "\006\126\007\131\010\124\013\125\001\002\000\004\014" +
    "\uffec\001\002\000\004\022\302\001\002\000\004\022\273" +
    "\001\002\000\004\014\246\001\002\000\004\015\244\001" +
    "\002\000\004\014\222\001\002\000\004\022\132\001\002" +
    "\000\004\016\133\001\002\000\006\020\135\021\134\001" +
    "\002\000\006\014\202\017\uffc8\001\002\000\006\014\153" +
    "\017\uffc7\001\002\000\004\017\137\001\002\000\004\022" +
    "\140\001\002\000\004\016\147\001\002\000\006\015\uffde" +
    "\017\uffde\001\002\000\006\015\144\017\143\001\002\000" +
    "\004\022\140\001\002\000\004\014\145\001\002\000\004" +
    "\014\uffe6\001\002\000\006\015\uffdf\017\uffdf\001\002\000" +
    "\006\020\151\021\150\001\002\000\012\014\uffc8\015\uffc8" +
    "\017\uffc8\022\uffc8\001\002\000\012\014\uffc7\015\uffc7\017" +
    "\uffc7\022\uffc7\001\002\000\006\015\uffc9\017\uffc9\001\002" +
    "\000\004\014\154\001\002\000\004\010\161\001\002\000" +
    "\004\014\uffda\001\002\000\004\014\157\001\002\000\006" +
    "\007\162\010\161\001\002\000\004\014\uffdb\001\002\000" +
    "\004\022\165\001\002\000\004\015\163\001\002\000\004" +
    "\014\164\001\002\000\004\014\uffe4\001\002\000\004\016" +
    "\166\001\002\000\006\020\151\021\150\001\002\000\004" +
    "\017\170\001\002\000\004\022\172\001\002\000\006\015" +
    "\uffd8\017\uffd8\001\002\000\004\016\200\001\002\000\006" +
    "\015\174\017\175\001\002\000\004\014\177\001\002\000" +
    "\004\022\172\001\002\000\006\015\uffd9\017\uffd9\001\002" +
    "\000\004\014\uffc5\001\002\000\010\020\047\021\045\036" +
    "\046\001\002\000\006\015\uffc3\017\uffc3\001\002\000\004" +
    "\014\203\001\002\000\004\022\210\001\002\000\004\014" +
    "\uffdc\001\002\000\004\014\206\001\002\000\006\007\211" +
    "\022\210\001\002\000\004\014\uffdd\001\002\000\004\014" +
    "\214\001\002\000\004\015\212\001\002\000\004\014\213" +
    "\001\002\000\004\014\uffe5\001\002\000\006\020\151\021" +
    "\150\001\002\000\004\014\216\001\002\000\004\022\217" +
    "\001\002\000\004\015\220\001\002\000\004\014\221\001" +
    "\002\000\004\014\uffc6\001\002\000\004\014\224\001\002" +
    "\000\004\014\uffd4\001\002\000\004\022\230\001\002\000" +
    "\004\014\227\001\002\000\004\014\uffd5\001\002\000\006" +
    "\005\231\022\230\001\002\000\004\014\234\001\002\000" +
    "\004\015\232\001\002\000\004\014\233\001\002\000\004" +
    "\014\uffea\001\002\000\006\020\237\022\236\001\002\000" +
    "\004\014\240\001\002\000\004\014\uffd1\001\002\000\004" +
    "\014\uffd2\001\002\000\004\022\241\001\002\000\004\015" +
    "\242\001\002\000\004\014\243\001\002\000\004\014\uffd3" +
    "\001\002\000\004\014\245\001\002\000\006\002\ufffc\014" +
    "\ufffc\001\002\000\004\014\247\001\002\000\004\022\254" +
    "\001\002\000\004\014\252\001\002\000\004\014\uffcf\001" +
    "\002\000\006\006\255\022\254\001\002\000\004\014\uffd0" +
    "\001\002\000\004\014\260\001\002\000\004\015\256\001" +
    "\002\000\004\014\257\001\002\000\004\014\uffe9\001\002" +
    "\000\012\020\237\021\262\022\236\045\265\001\002\000" +
    "\004\014\266\001\002\000\004\014\uffcb\001\002\000\004" +
    "\014\uffcd\001\002\000\004\014\uffcc\001\002\000\004\014" +
    "\uffca\001\002\000\004\022\267\001\002\000\004\015\270" +
    "\001\002\000\004\014\271\001\002\000\004\014\uffce\001" +
    "\002\000\006\015\uffe1\022\uffe1\001\002\000\004\016\300" +
    "\001\002\000\006\015\276\022\273\001\002\000\006\015" +
    "\uffe2\022\uffe2\001\002\000\004\014\277\001\002\000\004" +
    "\014\uffe3\001\002\000\006\020\151\021\150\001\002\000" +
    "\006\015\uffe0\022\uffe0\001\002\000\004\016\303\001\002" +
    "\000\006\020\151\021\304\001\002\000\006\014\312\017" +
    "\uffc8\001\002\000\004\017\306\001\002\000\004\022\172" +
    "\001\002\000\006\015\310\017\175\001\002\000\004\014" +
    "\311\001\002\000\004\014\uffe8\001\002\000\004\014\313" +
    "\001\002\000\004\022\321\001\002\000\004\014\316\001" +
    "\002\000\004\014\uffd6\001\002\000\006\010\320\022\321" +
    "\001\002\000\004\014\uffd7\001\002\000\004\015\330\001" +
    "\002\000\004\014\322\001\002\000\010\020\047\021\045" +
    "\036\046\001\002\000\004\014\324\001\002\000\004\022" +
    "\325\001\002\000\004\015\326\001\002\000\004\014\327" +
    "\001\002\000\004\014\uffc4\001\002\000\004\014\331\001" +
    "\002\000\004\014\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\014\002\007\003\004\004\010\005\006\006" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\041\027\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\032\001\001\000\006\027\036\030\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\047\036\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\037\051\043\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\071" +
    "\001\001\000\002\001\001\000\004\037\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\037\070\001\001" +
    "\000\004\037\067\001\001\000\004\037\066\001\001\000" +
    "\004\037\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\037\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\110\036\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\117\035\120" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\273\014\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\135\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\140" +
    "\031\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\154\045\155\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\166\001\001\000\002\001\001\000\006\022\172\023" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\023\175\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\200\036\043" +
    "\001\001\000\002\001\001\000\006\033\203\034\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\222\020\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\250\021\247\001\001\000\002\001\001\000\004\010\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\015\262\017\260\040\263\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\274\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\032\300\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\306\023\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\024\314\025\313" +
    "\001\001\000\002\001\001\000\004\024\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\322\036\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





 public String operacion = " ";
    /*public String cadena=" ";
     
    public void enviarLista(String dato){
        String[] arrayDato = dato.split(";");

        for(int i = 0; i< arrayDato.length; i++){
        erroresList list = new erroresList(arrayDato[i]);
        Open.lista2.add(list);
        }

    	
    }*/

    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
erroresList error =new erroresList("ERROR SINTACTICO: ",". Identificador "
        +s.value + " no reconocido.","FILA:  "+(s.right+1),"COLUMNA:  "+(s.left+1),"SE ESPERABA OTRA PALABRA");
        ventanaPrincipal.errorSin.add(error);
        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");

erroresList error =new erroresList("ERROR SINTACTICO: ",". Identificador "
        +s.value + " no reconocido.","FILA:  "+(s.right+1),"COLUMNA:  "+(s.left+1),"SE ESPERABA OTRA PALABRA");
        ventanaPrincipal.errorSin.add(error);
        
    
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Nodo raiz=null;
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= REQS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= QUES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // REQS ::= REQS REQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // REQS ::= REQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQS",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // REQ ::= dolar req dolar RQSS dolar req menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // QUES ::= QUES QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // QUES ::= QUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUES",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // QUE ::= dolar query dolar CQUERY dolar query menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QUE",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CQUERY ::= extraer de M ES 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CQUERY",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // M ::= usuario 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // M ::= producto 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // M ::= tienda 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("M",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ES ::= pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ES ::= donde VAL4S pyc 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ES",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VAL4S ::= VAL4S VAL3 VAL4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL4S",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VAL4S ::= VAL4 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL4S",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VAL3 ::= or 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VAL3 ::= and 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL3",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VAL4 ::= iden igual igual VAL6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VAL4 ::= n pabre iden igual igual VAL6 pcierra 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL4",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RQSS ::= RQSS REQINS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RQSS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // RQSS ::= REQINS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RQSS",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // REQINS ::= dolar iniciou dolar USUARIOIS dolar iniciou menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // REQINS ::= dolar crearu dolar USUARIOCS dolar crearu menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // REQINS ::= dolar producto iden igual VAL5 coma PRODUSS menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // REQINS ::= dolar producto iden igual cadena dolar PRODUSS1 dolar producto menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // REQINS ::= dolar tienda iden igual VAL5 coma TIENSS menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REQINS ::= dolar tienda iden igual cadena dolar TIENSS1 dolar tienda menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // REQINS ::= dolar tienda iden igual valorNumerico dolar TIENSS2 dolar tienda menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // REQINS ::= dolar get GTS menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("REQINS",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // GTS ::= GTS GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GTS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GTS ::= GT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GTS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // GT ::= iden igual VAL5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GT",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIENSS ::= TIENSS coma TIENS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIENSS ::= TIENS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIENSS1 ::= TIENSS1 TIENS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIENSS1 ::= TIENS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS1",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIENSS2 ::= TIENSS2 TIENS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIENSS2 ::= TIENS2 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENSS2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PRODUSS ::= PRODUSS coma PRODUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUSS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // PRODUSS ::= PRODUS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUSS",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // PRODUSS1 ::= PRODUSS1 PRODUS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUSS1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PRODUSS1 ::= PRODUS1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUSS1",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // USUARIOIS ::= USUARIOIS USUARIOI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOIS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // USUARIOIS ::= USUARIOI 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOIS",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // USUARIOI ::= dolar iden dolar VAL1 dolar iden menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOI",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VAL1 ::= valorNumerico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // VAL1 ::= iden 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // USUARIOCS ::= USUARIOCS USUARIOC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOCS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // USUARIOCS ::= USUARIOC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOCS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // USUARIOC ::= dolar iden dolar VAL2 dolar iden menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("USUARIOC",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // VAL2 ::= VAL1 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // VAL2 ::= T 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // T ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // T ::= corr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("T",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TIENS ::= iden igual VAL5 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VAL5 ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VAL5 ::= valorNumerico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL5",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // TIENS1 ::= dolar iden dolar VAL5 dolar iden menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENS1",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // TIENS2 ::= dolar producto iden igual VAL5 coma PRODUSS menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIENS2",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // PRODUS1 ::= dolar iden dolar VAL6 dolar iden menos dolar 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUS1",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PRODUS ::= iden igual VAL6 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRODUS",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VAL6 ::= cadena 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VAL6 ::= valorNumerico 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VAL6 ::= OP 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL6",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP ::= llabre OPSS llcierra 
            {
              Object RESULT =null;
		int opesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		operacion =  opes.toString();
         System.out.println("EL RESULTADO ES:  "+operacion );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OPSS ::= OPSS OPS 
            {
              Object RESULT =null;
		int opesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object opes = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = opes.toString() +ope.toString();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPSS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OPSS ::= OPS 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ope.toString() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPSS",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OPS ::= OPS mas OPS 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ope2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int v1 = Integer.parseInt((String) ope);
        int v2 = Integer.parseInt((String) ope2);
        int suma =  v1+v2;
        RESULT = String.valueOf(suma);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OPS ::= OPS menos OPS 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ope2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int v1 = Integer.parseInt((String) ope);
        int v2 = Integer.parseInt((String) ope2);
        int resta =  v1-v2;
        RESULT = String.valueOf(resta);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OPS ::= OPS multiplica OPS 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ope2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int v1 = Integer.parseInt((String) ope);
        int v2 = Integer.parseInt((String) ope2);
        int mul =  v1*v2;
        RESULT = String.valueOf(mul);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OPS ::= OPS barra OPS 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ope2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int v1 = Integer.parseInt((String) ope);
        int v2 = Integer.parseInt((String) ope2);
        int div =  v1/v2;
        RESULT = String.valueOf(div);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPS ::= rq pabre OPS pcierra 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        int v1 = Integer.parseInt((String) ope);
        int rz = (int) Math.sqrt(v1);
        RESULT = String.valueOf(rz);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPS ::= ptn pabre OPS pcierra 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        int v1 = Integer.parseInt((String) ope);
        int pt =  (int) Math.pow(v1,2);
        RESULT = String.valueOf(pt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPS ::= pabre OPS pcierra 
            {
              Object RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ope.toString() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPS ::= valorNumerico 
            {
              Object RESULT =null;
		int esoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eso = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = eso.toString() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
