/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto1compi;

import Analizador.Lexico;
import Analizador.parser;
import Listas.Atributos;
import Listas.erroresList;
import Listas.elemento;
import creacionArchivos.creacionJMarchivos;
import creacionArchivos.creacionPDFerrores;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.event.CaretEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Jacky Montenegro
 */
public class ventanaPrincipal extends javax.swing.JFrame {

    JFileChooser seleccionar = new JFileChooser();
    File archivo;
    BufferedReader entrada;
    Writer salidaArchivo = null;
    String path;
    String nombreArchivo;
    File nombreArchivoJava;
    JTextArea AreaT[] = new JTextArea[50];

    public static ArrayList<erroresList> errorLex = new ArrayList<erroresList>();
    public static ArrayList<elemento> usuarioList = new ArrayList<elemento>();
    public static ArrayList<elemento> tiendaList = new ArrayList<elemento>();
    public static ArrayList<elemento> productoList = new ArrayList<elemento>();
    public static ArrayList<elemento> modificaPList = new ArrayList<elemento>();
    public static ArrayList<elemento> modificaTList = new ArrayList<elemento>();
    public static ArrayList<Atributos> auxLista = new ArrayList<Atributos>();

    int linea;
    int p = 0;
    int pestañaIndex = 0;

    creacionPDFerrores nuevo = new creacionPDFerrores();
    creacionJMarchivos jm = new creacionJMarchivos();

    /**
     * Creates new form ventanaPrincipal
     */
    public ventanaPrincipal() {
        FileNameExtensionFilter Filter = new FileNameExtensionFilter("Archivo de Entrada", "txt");

        seleccionar.setFileFilter(Filter);
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn2 = new javax.swing.JButton();
        tp1 = new javax.swing.JTabbedPane();
        btn1 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txte = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn2.setText("Analizar");
        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2ActionPerformed(evt);
            }
        });

        btn1.setText("Abrir");
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });

        txte.setColumns(20);
        txte.setRows(5);
        jScrollPane3.setViewportView(txte);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(btn1)
                .addGap(18, 18, 18)
                .addComponent(btn2)
                .addContainerGap(424, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(tp1, javax.swing.GroupLayout.DEFAULT_SIZE, 305, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tp1, javax.swing.GroupLayout.DEFAULT_SIZE, 282, Short.MAX_VALUE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                        .addGap(12, 12, 12)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn2)
                    .addComponent(btn1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed
        // TODO add your handling code here:-
        abrir();
    }//GEN-LAST:event_btn1ActionPerformed

    private void btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2ActionPerformed
        // TODO add your handling code here:
        txte.setText(" ");
        try {
            String texto = (AreaT[tp1.getSelectedIndex()]).getText();
            Lexico scan = new Lexico(new BufferedReader(new StringReader(texto)));
            parser sintactico = new parser(scan);
            sintactico.parse();
        } catch (Exception e) {
            Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, e);
        }

        if (errorLex.size() > 0) {
            imprimirErrorListaL();

        } else {

            txte.setText("NO HAY ERRORES");
        }

        nuevo.crearPDFL();
        jm.aUsuario();
        jm.aTienda();
        jm.aProducto();

        /* imprimeA();
        imprimeB();
        imprimeC();*/
        JOptionPane.showMessageDialog(null, "YA SE ANALIZO");

        abreReporte();
        errorLex.clear();
    }//GEN-LAST:event_btn2ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn1;
    private javax.swing.JButton btn2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane tp1;
    private javax.swing.JTextArea txte;
    // End of variables declaration//GEN-END:variables
 public String abrirArchivo(File archivo) throws UnsupportedEncodingException, FileNotFoundException, IOException {

        String documento = " ";

        pestaña();

        try {
            new BufferedWriter(new OutputStreamWriter(new FileOutputStream(archivo, true), "UTF8"));
            entrada = new BufferedReader(new InputStreamReader(new FileInputStream(archivo), "utf-8"));
            String linea;
            while ((linea = entrada.readLine()) != null) {
                documento += linea + '\n';
                AreaT[pestañaIndex].setText(documento);
            }

        } catch (IOException e) {

        } finally {
            entrada.close();
        }
        return documento;

    }

    private void AreaLugar(CaretEvent e, JTextArea a) throws BadLocationException {
        int cLine = 1;
        int cColumn = 1;

        try {
            int posicion = a.getCaretPosition();
            cLine = a.getLineOfOffset(posicion);
            cColumn = posicion - a.getLineStartOffset(cLine);

            String fila = String.valueOf(cLine + 1);
            String columna = String.valueOf(cColumn + 1);

        } catch (Exception ex) {
            String fila = String.valueOf(cLine + 1);
            String columna = String.valueOf(cColumn + 1);

        }
    }

    public void abrir() {
        try {

            if (seleccionar.showDialog(null, "Abrir") == JFileChooser.APPROVE_OPTION) {
                archivo = seleccionar.getSelectedFile();
                abrirArchivo(archivo);

            }

        } catch (HeadlessException r) {
            System.out.println("Error" + r);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void pestaña() {
        JTextArea AreaT = new JTextArea();
        JScrollPane sc = new JScrollPane();
        sc.setViewportView(AreaT);

        TextLineNumber tl = new TextLineNumber(AreaT);
        sc.setRowHeaderView(tl);
        this.AreaT[p] = AreaT;

        tp1.addTab(archivo.getName(), sc);
        pestañaIndex = p;
        p++;

        AreaT.addCaretListener(new javax.swing.event.CaretListener() {
            @Override
            public void caretUpdate(CaretEvent e) {
                try {
                    AreaLugar(e, AreaT);
                } catch (BadLocationException ex) {
                    Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    public void imprimirErrorListaL() {
        String x = " ";

        for (int i = 0; i < errorLex.size(); i++) {
            System.out.println(errorLex.get(i).getTipo() + errorLex.get(i).getLexema() + errorLex.get(i).getLinea() + errorLex.get(i).getColumna() + errorLex.get(i).getDescripcion());
            x = x + errorLex.get(i).getTipo() + errorLex.get(i).getLexema() + errorLex.get(i).getLinea() + errorLex.get(i).getColumna() + errorLex.get(i).getDescripcion() + "\n";
            txte.setText(" ");
            txte.setText(x);
        }

    }

    private void abreReporte() {
        File ru = new File("C:\\Users\\Jacky Montenegro\\Desktop\\ErroresLex.pdf");
        if (!ru.exists()) {
            System.out.println("NO EXISTE RUTA");
            JOptionPane.showMessageDialog(null, "EL REPORTE NO FUE CREADO");
        } else {
//            try {
//                Desktop.getDesktop().open(ru);
//            } catch (IOException ex) {
//                Logger.getLogger(ventanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }
    }

    public void imprimeB() {
        for (int i = 0; i < productoList.size(); i++) {
            System.out.println("PRODUCTO----------------------------------------------------------");
            System.out.println(productoList.get(i).getCodigo());
            for (int j = 0; j < productoList.get(i).getListaAtribu().size(); j++) {

                System.out.println(productoList.get(i).getListaAtribu().get(j).getContenido());

            }
        }
    }

    public void imprimeC() {
        for (int i = 0; i < tiendaList.size(); i++) {
            System.out.println("TIENDA----------------------------------------------------------");
            System.out.println(tiendaList.get(i).getCodigo());
            for (int j = 0; j < tiendaList.get(i).getListaAtribu().size(); j++) {

                System.out.println(tiendaList.get(i).getListaAtribu().get(j).getContenido());

            }
        }
    }

    public void imprimeA() {
        for (int i = 0; i < usuarioList.size(); i++) {
            System.out.println("USUARIO----------------------------------------------------------");
            System.out.println(usuarioList.get(i).getCodigo());
            for (int j = 0; j < usuarioList.get(i).getListaAtribu().size(); j++) {

                System.out.println(usuarioList.get(i).getListaAtribu().get(j).getContenido());

            }
        }
    }

    public void comparadorP(ArrayList<Atributos> nueva) {
        String suc = " ";
        String cod = " ";
        //System.out.println("MODIFICACIONES DE PRODUCTOS");
        for (int i = 0; i < nueva.size(); i++) {

            // System.out.println(nueva.get(i).getTitulo());
            if (nueva.get(i).getContenido().equals("\"" + "eliminar" + "\"")) {
                for (int j = 0; j < nueva.size(); j++) {

                }
            } else if (nueva.get(i).getContenido().equals("\"" + "modificar" + "\"")) {

            }

        }
    }

    public void comparadorT(ArrayList<Atributos> nueva) {
        String suc = " ";
        String cod = " ";
        //System.out.println("MODIFICACIONES DE TIENDAS");
        for (int i = 0; i < nueva.size(); i++) {

            //  System.out.println(nueva.get(i).getTitulo());
            if (nueva.get(i).getContenido().equals("\"" + "eliminar" + "\"")) {
                for (int j = 0; j < nueva.size(); j++) {

                }
            } else if (nueva.get(i).getContenido().equals("\"" + "modificar" + "\"")) {

            }

        }
    }

    public void existeU(elemento trae) {
        respuestaS res = new respuestaS();
        String id = " ";
        String id2 = " ";
        String idn = " ";
        String idn2 = " ";

       // System.out.println("USUARIOS");

        if (!usuarioList.isEmpty()) {

            //System.out.println(" la lista ya tiene elementos");
            for (int i = 0; i < usuarioList.size(); i++) {
                //System.out.println(usuarioList.size());
                for (int j = 0; j < usuarioList.get(i).getListaAtribu().size(); j++) {
                    id = usuarioList.get(i).getListaAtribu().get(j).getTitulo();

                    if ("id".equals(id)) {
                        idn = usuarioList.get(i).getListaAtribu().get(j).getContenido();
                        //System.out.println("el NUMERO DE ID ES:  " + idn);

                        for (int k = 0; k < trae.getListaAtribu().size(); k++) {
                            id2 = trae.getListaAtribu().get(k).getTitulo();
                            //System.out.println("sldkfjslf   " + id2);
                            if ("id".equals(id2)) {
                                idn2 = trae.getListaAtribu().get(k).getContenido();
                                //System.out.println("trae  " + idn2);
                            }
                        }

                        if (idn.equals(idn2)) {
                            //  System.out.println("SON IGUALES " + idn + " = " + idn2);
                            parser.banderita = true;
                        }

                    }
                }
            }

        } else {
            System.out.println("CREA PRIMER USUARIO");
        }

    }

    public void creacionT(elemento trae) {
        respuestaS res = new respuestaS();
        String id = " ";
        String id2 = " ";
        String idn = " ";
        String idn2 = " ";

      //  System.out.println("TIENDA");

        if (!usuarioList.isEmpty()) {

            //System.out.println(" la lista ya tiene elementos");
            for (int i = 0; i < usuarioList.size(); i++) {
                //System.out.println(usuarioList.size());
                for (int j = 0; j < usuarioList.get(i).getListaAtribu().size(); j++) {
                    id = usuarioList.get(i).getListaAtribu().get(j).getTitulo();

                    if ("id".equals(id)) {
                        idn = usuarioList.get(i).getListaAtribu().get(j).getContenido();
                        //System.out.println(id + " usuario " + idn);

                        for (int k = 0; k < trae.getListaAtribu().size(); k++) {
                            id2 = trae.getListaAtribu().get(k).getTitulo();

                            if ("propietario".equals(id2)) {

                                idn2 = trae.getListaAtribu().get(k).getContenido();
                                //System.out.println(id2 + " tienda " + idn2);
                            }
                        }

                        if (idn.equals(idn2)) {
                            // System.out.println("SON IGUALES " + idn + " = " + idn2);
                            // parser.banderita = true;
                            creacionT2(trae);
                        }

                    }
                }
            }

        } else {
            System.out.println("NO HAY USUARIOS CREADOS AÚN....");
        }

    }

    private void creacionT2(elemento trae) {

        respuestaS res = new respuestaS();
        String id = " ";
        String id2 = " ";
        String idn = " ";
        String idn2 = " ";
        String img = " ";

        //  System.out.println("TIENDA2");
        if (!tiendaList.isEmpty()) {

            //System.out.println(" la lista ya tiene elementos");
            for (int i = 0; i < tiendaList.size(); i++) {
                //System.out.println(usuarioList.size());
                for (int j = 0; j < tiendaList.get(i).getListaAtribu().size(); j++) {
                    id = tiendaList.get(i).getListaAtribu().get(j).getTitulo();

                    if ("codigo".equals(id)) {
                        idn = tiendaList.get(i).getListaAtribu().get(j).getContenido();
                        //System.out.println(id + " codigo " + idn);

                        for (int k = 0; k < trae.getListaAtribu().size(); k++) {
                            id2 = trae.getListaAtribu().get(k).getTitulo();
                            //System.out.println("sldkfjslf   " + id2);
                            if ("codigo".equals(id2)) {
                                idn2 = trae.getListaAtribu().get(k).getContenido();
                                // System.out.println(id2 + " codigo " + idn2);
                            }

                            if ("img".equals(id2)) {
                                img = trae.getListaAtribu().get(k).getContenido();

                                File ru = new File(img.substring(1, img.length() - 1));
                                if (!ru.exists()) {
                                    // System.out.println("NO EXISTE RUTA"+img);

                                    parser.banderita = true;
                                }

                                //System.out.println("VERIFICANDO IMAGEN");
                            }
                        }

                        if (idn.equals(idn2)) {
                            // System.out.println("SON IGUALES " + idn + " = " + idn2);
                            parser.banderita = true;
                        }

                    }
                }
            }

        } else {

            for (int k = 0; k < trae.getListaAtribu().size(); k++) {
                id2 = trae.getListaAtribu().get(k).getTitulo();
                if ("img".equals(id2)) {
                    img = trae.getListaAtribu().get(k).getContenido();
                    File ru = new File(img.substring(1, img.length() - 1));
                    if (!ru.exists()) {
                        //System.out.println("NO EXISTE RUTA"+img);

                        parser.banderita = true;
                    } else {
                        //System.out.println("CREA PRIMERA TIENDA");
                    }

                    //System.out.println("VERIFICANDO IMAGEN");
                }
            }

        }
    }

    public void creacionP(elemento trae) {
        respuestaS res = new respuestaS();
        String id = " ";
        String id2 = " ";
        String idn = " ";
        String sucursal = " ";
        String codigoP = " ";
        String sucursal2 = " ";
        String codigoP2 = " ";
        String img = " ";

      //  System.out.println("PRODUCTOS");

        if (!tiendaList.isEmpty()) {

            // System.out.println(" la lista ya tiene elementos");
            for (int i = 0; i < tiendaList.size(); i++) {
                //System.out.println(usuarioList.size());
                for (int j = 0; j < tiendaList.get(i).getListaAtribu().size(); j++) {
                    id = tiendaList.get(i).getListaAtribu().get(j).getTitulo();

                    if ("codigo".equals(id)) {
                        idn = tiendaList.get(i).getListaAtribu().get(j).getContenido();
                        //System.out.println(id + " usuario " + idn);

                        for (int k = 0; k < trae.getListaAtribu().size(); k++) {
                            id2 = trae.getListaAtribu().get(k).getTitulo();

                            if ("sucursal".equals(id2)) {

                                sucursal = trae.getListaAtribu().get(k).getContenido();
                                //System.out.println(id2 + " tienda " + idn2);
                            }

                            if ("codigo".equalsIgnoreCase(id2)) {

                                codigoP = trae.getListaAtribu().get(k).getContenido();
                            }

                            if ("img".equals(id2)) {
                                img = trae.getListaAtribu().get(k).getContenido();

                                File ru = new File(img.substring(1, img.length() - 1));
                                if (!ru.exists()) {
                                    //System.out.println("NO EXISTE RUTA" + img);

                                    parser.banderita = true;
                                }

                                //System.out.println("VERIFICANDO IMAGEN");
                            }
                        }

                        if (idn.equals(sucursal)) {
                            // System.out.println("SON IGUALES " + idn + " = " + idn2);
                            creacionP2(sucursal, codigoP);
                        }

                    }
                }
            }

        } else {
            System.out.println("NO HAY TIENDAS CREADOS AÚN....");
        }

    }

    public void creacionP2(String sucursal, String codigoP) {
        String id3 = " ";
        String sucursal2 = " ";
        String codigoP2 = " ";

        for (int i = 0; i < productoList.size(); i++) {
            for (int j = 0; j < productoList.get(i).getListaAtribu().size(); j++) {
                id3 = productoList.get(i).getListaAtribu().get(j).getTitulo();

                if ("sucursal".equals(id3)) {

                    sucursal2 = productoList.get(i).getListaAtribu().get(j).getContenido();
                    //System.out.println(id2 + " tienda " + idn2);
                }

                if ("codigo".equalsIgnoreCase(id3)) {

                    codigoP2 = productoList.get(i).getListaAtribu().get(j).getContenido();
                }
            }

            if (sucursal.equals(sucursal2) && codigoP.equals(codigoP2)) {
                parser.banderita = true;
            }
        }
    }

//        for (elemento produc : productoList) {
//            for (int k = 0; k < produc.getListaAtribu().size(); k++) {
//                id3 = produc.getListaAtribu().get(k).getTitulo();
//
//                if ("sucursal".equals(id3)) {
//
//                    sucursal2 = produc.getListaAtribu().get(k).getContenido();
//                    //System.out.println(id2 + " tienda " + idn2);
//                }
//
//                if ("codigo".equalsIgnoreCase(id3)) {
//
//                    codigoP2 = produc.getListaAtribu().get(k).getContenido();
//                }
//            }
//
//            if (sucursal.equals(sucursal2) && codigoP.equals(codigoP2)) {
//                parser.banderita = true;
//            }
//        }
    //  }
    public void modificaT(elemento trae) {
        String tipo = " ";
        String titulo = " ";
        System.out.println("MODIFICA TIENDA");
        for (int i = 0; i < trae.getListaAtribu().size(); i++) {
            titulo = trae.getListaAtribu().get(i).getTitulo();

            if ("tipo".equals(titulo)) {
                tipo = trae.getListaAtribu().get(i).getContenido();
               // System.out.println(titulo);
                if ("\"modificacion\"".equals(tipo) || "\"modificar\"".equals(tipo)) {
                    //System.out.println(tipo);
                    moT(trae);
                }
                if ("\"eliminar\"".equals(tipo)) {
                   // System.out.println(tipo);
                    elT(trae);
                }
            }

        }
    }

    private void moT(elemento trae) {
        String tipo = " ";
        String tipoc = " ";
        String propietario = " ";
        String propietario1 = " ";
        String id = " ";
        String idn = " ";
        String img = " ";
        int num = 0;
        //System.out.println("222 MODIFICACION TIENDA");
        if (!tiendaList.isEmpty()) {

            //System.out.println(" la lista ya tiene elementos");
            for (int i = 0; i < tiendaList.size(); i++) {
                //System.out.println(usuarioList.size());
                for (int j = 0; j < tiendaList.get(i).getListaAtribu().size(); j++) {
                    id = tiendaList.get(i).getListaAtribu().get(j).getTitulo();

                    if ("propietario".equals(id)) {
                       
                        propietario1 = tiendaList.get(i).getListaAtribu().get(j).getContenido();
                        // System.out.println(id+propietario1);
                         num = i;
                    }

                    if ("codigo".equals(id)) {
                       
                        idn = tiendaList.get(i).getListaAtribu().get(j).getContenido();
                       //  System.out.println(id+idn);
                        //System.out.println(id + " codigo " + idn);

                    }
                    for (int k = 0; k < trae.getListaAtribu().size(); k++) {
                        tipo = trae.getListaAtribu().get(k).getTitulo();
                        
                        if ("codigo".equals(tipo)) {
                            tipoc = trae.getListaAtribu().get(k).getContenido();
                          //  System.out.println(tipo+tipoc);
                        }

                        if ("propietario".equals(tipo)) {
                            propietario = trae.getListaAtribu().get(k).getContenido();
                           // System.out.println(tipo+propietario);
                        }

                        if ("img".equals(tipo)) {
                            img = trae.getListaAtribu().get(k).getContenido();

                            File ru = new File(img.substring(1, img.length() - 1));
                            if (!ru.exists()) {
                                // System.out.println("NO EXISTE RUTA"+img);

                                parser.banderita = true;
                            }

                            //System.out.println("VERIFICANDO IMAGEN");
                        }
                    }

                    if (idn.equals(tipoc) && propietario.equals(propietario1)) {
                       // System.out.println("SON IGUALES " + idn + " = " + tipoc+" Y "+propietario+" = "+propietario1);
                        moTF(trae, num);
                    }
                }
            }

        }

    }

    private void moTF(elemento trae, int num) {
        String tipo = " ";
        String img = " ";
        String nombre = " ";
        String direccion = " ";
        String telefono = " ";
        
            System.out.println("ENTRO AL ULTIMO MODIFICAR O:"+num);

        for (int k = 0; k < trae.getListaAtribu().size(); k++) {
            tipo = trae.getListaAtribu().get(k).getTitulo();
            if ("nombre".equals(tipo)) {
                nombre = trae.getListaAtribu().get(k).getContenido();
               // System.out.println(nombre+tipo);
                for (int j = 0; j < tiendaList.get(num).getListaAtribu().size(); j++) {
                    if ("nombre".equals(tiendaList.get(num).getListaAtribu().get(j).getTitulo())) {
                        
                        tiendaList.get(num).getListaAtribu().get(j).setContenido(nombre);
                        //System.out.println(tiendaList.get(num).getListaAtribu().get(j).getTitulo());
                    }
                }
            }

            if ("direccion".equals(tipo)) {
                direccion = trae.getListaAtribu().get(k).getContenido();
               // System.out.println(direccion + tipo);
                for (int j = 0; j < tiendaList.get(num).getListaAtribu().size(); j++) {
                    if ("direccion".equals(tiendaList.get(num).getListaAtribu().get(j).getTitulo())) {
                        tiendaList.get(num).getListaAtribu().get(j).setContenido(direccion);
                      //  System.out.println(tiendaList.get(num).getListaAtribu().get(j).getTitulo());
                    }
                }
            }

            if ("img".equals(tipo)) {
                img = trae.getListaAtribu().get(k).getContenido();
                //System.out.println(img+tipo);
                for (int j = 0; j < tiendaList.get(num).getListaAtribu().size(); j++) {
                    if ("img".equals(tiendaList.get(num).getListaAtribu().get(j).getTitulo())) {
                        tiendaList.get(num).getListaAtribu().get(j).setContenido(img);
                       // System.out.println(tiendaList.get(num).getListaAtribu().get(j).getTitulo());
                    }
                }

            }
            if ("telefono".equals(tipo)) {
                telefono = trae.getListaAtribu().get(k).getContenido();
               // System.out.println(telefono+tipo);
                for (int j = 0; j < tiendaList.get(num).getListaAtribu().size(); j++) {
                    if ("telefono".equals(tiendaList.get(num).getListaAtribu().get(j).getTitulo())) {
                        tiendaList.get(num).getListaAtribu().get(j).setContenido(telefono);
                        //System.out.println(tiendaList.get(num).getListaAtribu().get(j).getTitulo());
                    }
                }
            }
        }
    }

    private void elT(elemento trae) {
        System.out.println("hola");
    }

}
