
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import compi1.corto1.ventanaPrincipal;
import Listas.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\006\011\006\015\005\001\002\000\020\002" +
    "\ufffe\006\015\011\ufffe\015\ufffe\021\013\022\014\023\012" +
    "\001\002\000\006\011\006\015\005\001\002\000\022\002" +
    "\ufff8\006\ufff8\011\ufff8\015\ufff8\016\ufff8\021\ufff8\022\ufff8" +
    "\023\ufff8\001\002\000\004\002\022\001\002\000\010\002" +
    "\000\011\006\015\005\001\002\000\020\002\uffff\006\015" +
    "\011\uffff\015\uffff\021\013\022\014\023\012\001\002\000" +
    "\006\011\006\015\005\001\002\000\006\011\006\015\005" +
    "\001\002\000\006\011\006\015\005\001\002\000\006\011" +
    "\006\015\005\001\002\000\022\002\ufffc\006\ufffc\011\ufffc" +
    "\015\ufffc\016\ufffc\021\013\022\ufffc\023\012\001\002\000" +
    "\022\002\ufffd\006\ufffd\011\ufffd\015\ufffd\016\ufffd\021\013" +
    "\022\ufffd\023\012\001\002\000\022\002\ufffa\006\ufffa\011" +
    "\ufffa\015\ufffa\016\ufffa\021\ufffa\022\ufffa\023\ufffa\001\002" +
    "\000\022\002\ufffb\006\ufffb\011\ufffb\015\ufffb\016\ufffb\021" +
    "\ufffb\022\ufffb\023\ufffb\001\002\000\004\002\001\001\002" +
    "\000\014\006\015\016\024\021\013\022\014\023\012\001" +
    "\002\000\022\002\ufff9\006\ufff9\011\ufff9\015\ufff9\016\ufff9" +
    "\021\ufff9\022\ufff9\023\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\002\006\003\007\004\003\001\001\000" +
    "\002\001\001\000\004\004\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\010\001\001\000\002\001" +
    "\001\000\004\004\020\001\001\000\004\004\017\001\001" +
    "\000\004\004\016\001\001\000\004\004\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




String operacion = " ";
    /**Metodo al que se llama automáticamente ante algún error sintactico.*/
    public void syntax_error(Symbol s){
        System.err.println("Error en la Línea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "
        +s.value + " no reconocido." );
erroresList error =new erroresList("ERROR SINTACTICO: ",". Identificador "
        +s.value + " no reconocido.","FILA:  "+(s.right+1),"COLUMNA:  "+(s.left+1),"SE ESPERABA OTRA PALABRA");
        ventanaPrincipal.errorLex.add(error);
        
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperación de
    errores.*/
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.err.println("Error en la Línea " + (s.right+1)+ "Columna "+(s.left+1)+". Identificador " +
        s.value + " no reconocido.");

erroresList error =new erroresList("ERROR SINTACTICO: ",". Identificador "
        +s.value + " no reconocido.","FILA:  "+(s.right+1),"COLUMNA:  "+(s.left+1),"SE ESPERABA OTRA PALABRA");
        ventanaPrincipal.errorLex.add(error);
        
    
    }

    /*public Nodo getRaiz(){
        return action_obj.raiz;
    }*/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //Nodo raiz=null;
    

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= OPSS 
            {
              String RESULT =null;
		int opesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPSS ::= OPSS OPS 
            {
              String RESULT =null;
		int opesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String opes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(ope);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPSS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPSS ::= OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println(ope);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPSS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPS ::= OPS mas OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        RESULT = ope+ope2+m;
        //System.out.println(ope+ope2+m);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPS ::= OPS menos OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int meleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int meright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String me = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        RESULT= ope+ope2+me;
          //System.out.println(ope+ope2+me);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPS ::= OPS multiplica OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int muleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int muright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        
         RESULT = ope+ope2+mu;
       // System.out.println(ope+ope2+mu);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPS ::= OPS barra OPS 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ope2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ope2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ope2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        
        RESULT = ope+ope2+b;
        //System.out.println(ope+ope2+b);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPS ::= pabre OPS pcierra 
            {
              String RESULT =null;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String ope = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = ope.toString() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPS ::= valorNumerico 
            {
              String RESULT =null;
		int esoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String eso = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = eso.toString() ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
